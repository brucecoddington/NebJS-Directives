doctype html
include ../includes/mixins

+page("Lecture 07 - Factories and Providers")
  +lecture-title-page("Factories and Providers", "Lecture 07")

  section
    h1 Lab Six
    h2 Solution

  section
    h1 Providers

  section
    p The AngularJS injector creates two types of objects, services and specialized objects.

  section
    h3 Services
    p Services are objects whose API is defined by the developer writing the service.

  section
    h3 Specialized Objects
    p Specialized objects conform to a specific Angular framework API.
    
  section
    p An example of these specialized objects are controllers, directives, filters or animations.

  section
    p The injector needs to know how to create these objects.

  section
    p You tell the injector by registering a "recipe" for creating your object.
    
  section
    p There are five recipe types.

  section
    h2 Value Recipe

  section
    p You can use the Value recipe to create named values that are injectable.

  section
    p You cannot inject dependencies into a Value recipe.

  section
    p The Value recipe is often used for specifying configuration values.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .value('apiUrl', '/api')
        .controller('MyCtrl', function(apiUrl) {
          // Do something with the apiUrl
        });

      </code>

  section
    h2 Constant Recipe

  section
    p  Since the config function runs in the configuration phase when no services are available,
      | it doesn't have access even to simple value objects created via Value recipe.

  section
    p Since simple values don't have dependencies or configuration,
      | it is often handy to make them available in both the configuration and run phases.

    p This is what the Constant recipe is for.

  section
    pre.
      <code class="js" data-trim>
      angular.module('app')
        .constant('apiUrl', '/api');
        
      </code>

  section
    h2 Factory Recipe

  section
    p The Factory recipe builds on top of the Value recipe but, adds the following abilities
    ul
      li the ability to use other services (have dependencies)
      li service initialization
      li delayed/lazy initialization

  section
    p The Factory recipe constructs a new service using a function with zero or more arguments (these are dependencies on other services).

  section
    p We can use the Factory recipe to provide utility functions that have other dependencies.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .factory('authentication', function(myDependency) {
          var authentication = {
            login : function(username, password) {
              // Perform login functionality with myDependency
            },
            logout : function(username, password) {
              // Perform logout functionality with myDependency
            },
          };
          return authentication;
        });

      </code>

  section
    h2 Service Recipe

  section
    p The Service recipe produces a service just like the Value or Factory recipes, but it does so by invoking a constructor with the new operator.

  section
    p First, lets see how we can implement a service recipe with a factory
    br
    pre.
      <code class="js" data-trim>
      function AuthenticationService(myDependency) {
        this.loginAttempts = 0;

        this.login = function(username, password) {
          this.loginAttempts++;
          // Perform login functionality with myDependency
        };

        this.logout = function(username, password) {
          this.loginAttempts = 0;
          // Perform logout functionality with myDependency
        };
      };

      </code>

  section
    p With the AuthenticationService constructor function we just created, we can then register the new Service.
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .factory('authentication', function (myDependency) {
          // The service recipe does this for you
          return new AuthenticationService(myDependency);
        });

      </code>

  section
    p Using the service recipe, we can accomplish the same thing with less code.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .service('authentication', function(myDependency) {
          this.loginAttempts = 0;

          this.login = function(username, password) {
            this.loginAttempts++;
            // Perform login functionality with myDependency
          };

          this.logout = function(username, password) {
            this.loginAttempts = 0;
            // Perform logout functionality with myDependency
          };
        });

      </code>

  section
    p Service recipes follow a design pattern called constructor injection.

  section
    h2 Providers

  section
    p The Provider recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it.

  section
    p It is the most verbose recipe with the most abilities, but for most services it's overkill.

  section
    p You should use the Provider recipe only when you want to expose an API for application-wide configuration before the application starts.

  section
    p The Provider recipe is syntactically defined as a custom type that implements a $get method.

  section
    p This method is a factory function just like the one we use in Factory recipe.
    p In fact, if you define a Factory recipe, an empty Provider type with the $get
      | method set to your factory function is automatically created under the hood.

  section
    p Let's look at an example:
    pre.
      <code class="js" data-trim>
      .provider('authorization', {

        $get: function ($injector, authentication, securityContext) {
          return {
            requireAuthenticatedUser: function () {
              // implementation for requiring an authenticated user.
            }
          };
        }
      });

      </code>

  section
    h2 api service

  section
    p In order to make it easier to use $resource, we have added an api
      | service to handle all of the configuration of new resources.

  section
    p First we declare the factory and create a 'private' configuration.

    pre.
      <code class="js" data-trim>
      .factory('api', function ($resource) {
        var api = {
          idOnly : {_id: '@_id'},

          extraMethods: {
            'paged' : {
              method: 'GET',
              params: {
                page: '@page'
              }
            },
            'update' : {
              method: 'PUT'
            },
            'restore' : {
              method: 'PUT'
            }
          },
      });
      </code>

  section
    p Next, we create an 'add' function to check the configuration, then return the api object.

    pre.
      <code class="js" data-trim>
        add : function (config) {
          var params,
            url;

          // If the url follows the expected pattern, we can set cool defaults
          if (!config.unnatural) {
            var orig = angular.copy(api.idOnly);
            params = angular.extend(orig, config.params);
            url = config.url + '/:_id';

          // otherwise we have to declare the entire configuration.
          } else {
            params = config.params;
            url = config.url;
          }

          // If we supply a method configuration, use that instead of the default extra.
          var methods = config.methods || api.extraMethods;

          api[config.resource] = $resource(url, params, methods);
        }
      };
      </code>

  section
    p This api service is now used by the data service to make our HTTP request.

    pre.
      <code class="js" data-trim>
      .factory('data', function (api) {

        var control = {
          // Calls the paged() function.
          page : function (resource, query) {
            return api[resource].paged(query).$promise;
          },
          // other code is here
          get : function (resource, query) {
              return api[resource].get(query).$promise;
          },
          // still more code
          update : function (resource, model) {
            var updated = api[resource].update(model);
            return updated.$promise || updated;
          },
      </code>

  section
    h2 Lab 7 - Providers and Factories
    ul
      li Add security to the application.
      li Add a notifications service.
