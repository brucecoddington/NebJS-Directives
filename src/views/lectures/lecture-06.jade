doctype html
include ../includes/mixins

+page("Lecture 06 - Promises and Interceptors")
  +lecture-title-page("Promises and Interceptors", "Lecture 06")

  section
    h1 Lab Five
    h2 Solution
    
  section
    h1 Callbacks
    h2 Review
    
  section
    p In JavaScript, functions are first-class objects, which means functions can be used in a first-class manner like objects.
      
  section
    p We can store functions as variables and call them later. 
    br
    pre.
      <code class="js" data-trim>
      var myFunction = function() {
        // Do something
      };
      
      myFunction();
      
      </code>
      
  section
    p We can also pass functions as arguments to other functions. 
    br
    pre.
      <code class="js" data-trim>
      var myFunction = function(arg) {
        console.log('myFunction called');
        arg();
      };
      
      var myOtherFunction = function() {
        console.log('myOtherFunction called');
      };
      
      myFunction(myOtherFunction);
      
      </code>
      
  section
    p Functions passed as arguments to other functions (that are then "called back" at a later time) are called callbacks.
  
  section
    p Callbacks are typically used to perform an action after some asynchronous event has occurred.
    
  section
    p Lets consider performing an action on a user triggered event.
    br
    pre.
      <code class="js" data-trim>
      // Our callback
      var buttonClicked = function() {
        console.log('My button clicked!');
      }
      
      // Pass the callback to click
      $('#my-button').click(buttonClicked);
      
      </code>
      
  section
    p Since our callback is only being used once, we don't need to assign it to a variable.
    p We can just create the callback inline.
    br
    pre.   
      <code class="js" data-trim>   
      // Pass the callback to click
      $('#my-button').click(function() {
        console.log('My button clicked!');
      });
      
      </code>

  section
    h1 Promises

  section
    p
      | Promises provide a well-defined interface for interacting with an object that represents the result
      | of an asynchronous action.

  section
    p That action may or may not be finished at any given point in time.

  section
    img.no-style(style="width: 75%;", src="/angular-training/assets/img/lecture-06/wat_grande.jpg")

  section
    p To understand why we use promises, lets look at one big problem that promises can mitigate.

  section
    h3 The
    h1 Pyramid
    h1 of Doom

  section
    p The "Pyramid of Doom" a situation where code marches to the right faster than it marches forward.
    br
    pre.
      <code class="js" data-trim>
      step1(function (value1) {
        step2(value1, function(value2) {
          step3(value2, function(value3) {
            step4(value3, function(value4) {
              step5(value4, function(value5) {
                step6(value5, function(value6) {
                  // Do something with value6
                });
              });
            });
          });
        });
      });

      </code>

  section
    p This is really difficult to maintain because we're nesting a callback, within a callback, within a callback just to perform tasks sequentially.
    br
    pre.
      <code class="js" data-trim>
      // step1() executes a callback when it's finished
      // and supplies the result
      step1(function (value1) {
        // step2() uses the result from step1(),
        // does something with it,
        // and executes a callback with its result when it's done.
        step2(value1, function(value2) {
          // please, make it stop...
        });
      });

      </code>

  section
    p With a promise library, you can flatten the pyramid.
    br
    pre.
      <code class="js" data-trim>
      promisedStep1()
        .then(promisedStep2)
        .then(promisedStep3)
        .then(promisedStep4)
        .then(promisedStep5)
        .then(promisedStep6)
        .then(function (value6) {
          // Do something with value6
        })
        .catch(function (error) {
          // Handle any error from all above steps
        })
        .done();

      </code>

  section
    p With this approach, you also get implicit error propagation, just like try, catch, and finally.

  section
    p An error in promisedStep1 will flow all the way to the catch function, where itâ€™s caught and handled.

  section
    p Using the callback method, you would have to provide error handling for each individual step.

  section
    p Our original definition of a promise was:
    p
      | Promises provide a well-defined interface for interacting with an object that represents the result
      | of an asynchronous action.

  section
    p What do we use as the "object that represents the result of an asynchronous action"?

  section
    h3 Deferred
    p The "Deferred" object represents a task which will finish in the future.

  section
    p AngularJS provides the $q service which you can use to create deferred objects.

  section
    p Let's create a promise chain with the $q service.

  section
    p First, lets create an asynchronous function that returns a promise.
    br
    pre.
      <code class="js" data-trim>
      controller('PromiseCtrl', function($scope, $q, $timeout) {
        $scope.myAsyncTask = function() {
          // Create the deferred object
          var deferred = $q.defer();

          // After 2 seconds
          $timeout(function() {
            // Fulfill the promise with a result
            deferred.resolve("My Result");
          }, 2000);

          // Return the promise for a result immediately
          // This function returns before we resolve the promise
          return deferred.promise;
        };
      });

      </code>

  section
    p Now, lets use the promise to execute a task after our asynchronous function completes.
    br
    pre.
      <code class="js" data-trim>
      controller('PromiseCtrl', function($scope) {

        // $scope.myAsyncTask = ...

        $scope.myAsyncTask()         // call myAsyncTask
          .then(function(result) {   // then,
            $scope.result = result;  // save the result on scope
          });

      });

      </code>

  section
    p You've seen this before...

  section
    p The data service methods return promises to the response data from the server.
    br
    pre.
      <code class="js" data-trim>
      controller('EmployeeCtrl', function($scope, data) {

        data.list('employees')
          .then(function (employees) {
            $scope.employees = employees;
          });

      });

      </code>

  section
    p What happens when you can't fulfill the promise?

  section
    p When you can't resolve a promise, reject it.
    br
    pre.
      <code class="js" data-trim>
      controller('PromiseCtrl', function($scope, $q, $timeout) {
        $scope.myAsyncTask = function() {
          var deferred = $q.defer();

          $timeout(function() {
            // Reject the promise with a reason
            deferred.reject("Nope.");
          }, 2000);

          return deferred.promise;
        };
      });

      </code>

  section
    p We reject promises so that we handle the errors appropriately
    br
    pre.
      <code class="js" data-trim>
      controller('PromiseCtrl', function($scope, $log) {

        $scope.myAsyncTask()         // call myAsyncTask (fails)
          .then(function(result) {   // then,
            $scope.result = result;  // this will never happen
          })
          .catch(function(error) {   // because we're catching failures
            $log.error("Error!", error);
          });

      });

      </code>


  section
    p  What if you don't know if the object you're dealing with is a promise or not?

  section
    p You can use the $q.when(), when you're dealing with an object that might or might not be a promise.
    br
    pre.
      <code class="js" data-trim>
      controller('PromiseCtrl', function($scope, $q) {
        // Try to use a promise from some async task
        $q.when($scope.myAsyncTask())
          .then(function(result) {    // then,
            $scope.result = result;   // do something with the result
          });

      });

      </code>

  section
    h1 Interceptors

  section
    p
      | For purposes of global error handling, authentication, or other request processing, it is desirable to be able to
      | intercept those requests and perform actions before they reach their destination.

  section
    p For that reason, AngularJS provides interceptors.

  section
    p The interceptors are service factories that are registered with the $httpProvider by adding them to the $httpProvider.interceptors array.

  section
    p The factory is called and injected with dependencies (if any) and returns the interceptor.

  section
    p Lets start by creating a factory that intercepts requests.

  section
    p Interceptors are free to modify the the object passed into them and then return them as an object or a promise to the object.
    br
    pre.
      <code class="js" data-trim>
      .factory('myHttpInterceptor', function($q) {
        return {
          // The request before it's sent to the server
          'request': function(config) {
            // do something on success
            return $q.when(config);
          },
          // The response from the server
          'response': function(response) {
            // do something on success
            return $q.when(response);
          },
        };
      });

      </code>

  section
    p We can also intercept the errors for requests and responses.

  section
    p Error interceptors gets called when a previous interceptor threw an error or resolved with a rejection.
    br
    pre.
      <code class="js" data-trim>
      .factory('myHttpInterceptor', function($q) {
        return {
          'requestError': function(rejection) {
            // do something on error
            if (canRecover(rejection)) {
              return responseOrNewPromise;
            }
            return $q.reject(rejection);
          },

          'responseError': function(rejection) {
            // do something on error
            if (canRecover(rejection)) {
              return responseOrNewPromise;
            }
            return $q.reject(rejection);
          }
        };
      });

      </code>

  section
    p   We'll use interceptors in the next lab to notify the user on the progress of async requests.

  section
    h1 Lab Six
    h2 Interceptors
