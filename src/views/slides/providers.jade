doctype html
include ../includes/mixins

+page("Lecture 07 - Factories and Providers")
  +lecture-title-page("Factories and Providers", "Lecture 07")

  section
    h1 Lab Six
    h2 Solution

  section
    h1 Providers

  section
    p The AngularJS injector creates two types of objects:
    ul
      li Specialized objects
      li Services

  section
    h3 Specialized Objects
    p Specialized objects conform to a specific Angular framework API.
    p Controllers, directives, filters or animations.

  section
    h3 Services
    p Services are objects whose API is defined by the developer writing the service.
    p 5 Recipe Types

  section
    h2 Value Recipe

  section
    p The Value recipe is often used for specifying configuration values.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .value('apiUrl', '/api')
        .controller('MyCtrl', function(apiUrl) {
          // Do something with the apiUrl
        });

      </code>

  section
    h2 Constant Recipe

  section
    pre.
      <code class="js" data-trim>
      angular.module('app')
        .constant('apiUrl', '/api');
        
      </code>

  section
    h2 Factory Recipe

  section
    p We can use the Factory recipe to provide utility functions that have other dependencies.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .factory('authentication', function(myDependency) {
          var authentication = {
            login : function(username, password) {
              // Perform login functionality with myDependency
            },
            logout : function(username, password) {
              // Perform logout functionality with myDependency
            },
          };
          return authentication;
        });

      </code>

  section
    h2 Service Recipe

  section
    p Using the service recipe, we just provide the constructor function.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .service('authentication', function(myDependency) {
          this.loginAttempts = 0;

          this.login = function(username, password) {
            this.loginAttempts++;
            // Perform login functionality with myDependency
          };

          this.logout = function(username, password) {
            this.loginAttempts = 0;
            // Perform logout functionality with myDependency
          };
        });

      </code>

  section
    h2 Providers

  section
    p Let's look at an example:
    pre.
      <code class="js" data-trim>
      .provider('authorization', {

        $get: function ($injector, authentication, securityContext) {
          return {
            requireAuthenticatedUser: function () {
              // implementation for requiring an authenticated user.
            }
          };
        }
      });

      </code>

  section
    p
      a(href="directives.html" target="_blank") Let's move on to Directives!
